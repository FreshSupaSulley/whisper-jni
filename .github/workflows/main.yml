name: Build and publish
on:
  workflow_dispatch:
jobs:
  download-models:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download tiny ggml model
      run: |
        git submodule update --init
        ./download-test-model.sh
        ./download-vad-model.sh
    - uses: actions/upload-artifact@v4
      with:
        name: tiny-ggml-model
        path: ggml-tiny.bin
        retention-days: 2
    - name: Upload silero model
      uses: actions/upload-artifact@v4
      with:
        name: silero-ggml-model
        path: ggml-silero-v5.1.2.bin
        retention-days: 2

  build-linux:
    needs: [download-models]
    strategy:
      matrix:
        # Define combinations of architecture and platform
        include:
          - platform: ubuntu-latest
            vulkan: OFF
          - platform: ubuntu-latest
            vulkan: ON
          - platform: ubuntu-24.04-arm
            vulkan: OFF
          - platform: ubuntu-24.04-arm
            vulkan: ON
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      # Install Glslang because Vulkan doesn't bundle it for Ubuntu
      - name: Install Vulkan Tools
        if: matrix.vulkan == 'ON'
        run: |
          sudo apt update
          sudo apt install -y vulkan-tools glslang-tools
          sudo apt-get install -y libvulkan1 mesa-vulkan-drivers
          sudo vulkaninfo
      - name: Build shaderc
        if: matrix.vulkan == 'ON'
        run: |
          # Set up shaderc source directory and build directory
          SOURCE_DIR=$PWD/shaderc
          BUILD_DIR=$PWD/shaderc_build

          # Clone shaderc repository
          git clone https://github.com/google/shaderc $SOURCE_DIR
          cd $SOURCE_DIR
          ./utils/git-sync-deps  # This fetches the dependencies

          # Create a separate build directory
          mkdir $BUILD_DIR
          cd $BUILD_DIR

          # Build shaderc using CMake and Ninja
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release $SOURCE_DIR
          ninja

          # Optionally run tests
          # ctest

          # Move glslc to a directory in PATH
          sudo mv glslc/glslc /usr/local/bin/
      # Differs from the other Vulkan action (jakoch/install-vulkan-sdk-action@v1) because this lets us install Glslang too
      # I have no idea why this is the case but atp I am embodying the "if it ain't broke don't fix it" mentality
      # ^ was I wrong? Can we go back to the OG?
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        if: matrix.vulkan == 'ON'
        with:
          vulkan-query-version: 1.4.304.1
          vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang, SPIRV-Tools
          vulkan-use-cache: true
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
          mkdir -p test-results
      - name: Build
        env:
          VULKAN: ${{ matrix.vulkan }}
        run: ./build_linux.sh
      - name: Test
        run: ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/test-results/**/*.xml'
      - name: Upload natives
        uses: actions/upload-artifact@v4
        with:
          name: linux-natives-${{ matrix.platform }}-${{ matrix.vulkan }}
          path: whisperjni-build/*

  build-windows:
    needs: [download-models]
    runs-on: windows-latest
    strategy:
      matrix:
        vulkan: [OFF, ON]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      # Also install Vulkan if we're building for it
      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1
        if: matrix.vulkan == 'ON'
        with:
          vulkan_version: 1.4.309.0
          install_runtime: true
          # Does using cache fuck up installing the runtime??
          # ^ yes, it seems so
          # cache: true
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build
        shell: powershell
        env:
          VULKAN: ${{ matrix.vulkan }}
        run: .\build_windows.ps1
      - name: Test
        run: ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/*.xml'
      - name: Upload natives
        uses: actions/upload-artifact@v4
        with:
          name: windows-natives-${{ matrix.vulkan }}
          path: whisperjni-build/*.dll

  build-mac:
    needs: [download-models]
    strategy:
      matrix:
        include:
        - arch: x86_64
          version: macos-13
        - arch: aarch64
          version: macos-14
    # Can't we just build on macos-14 for both?? Need to test
    runs-on: ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build binary
        run: |
          export DYLD_LIBRARY_PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/
          # Just in case
          chmod +x ./build_mac.sh
          ./build_mac.sh ${{ matrix.arch }}
        # Apparently gradlew isn't executable by default
      - name: Test
        run: |
          chmod +x ./gradlew
          ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/*.xml'
      - name: Artifact macos x64
        uses: actions/upload-artifact@v4
        with:
          name: mac-natives-${{ matrix.arch }}
          path: whisperjni-build/*.dylib

  publish:
    runs-on: ubuntu-latest
    needs: [download-models, build-linux, build-windows, build-mac]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
    - uses: actions/setup-java@v4
      with:
        java-version: 22
        distribution: 'temurin'
    - name: Check tree
      run: ls -R
    - name: Move natives
      run: |
        find ./src/main/resources -name ".gitkeep" -type f -delete
        # mv ./linux-natives-amd64-ON/*.so ./src/main/resources/linux-x64-vulkan/
        # mv ./linux-natives-arm64-ON/*.so ./src/main/resources/linux-aarch64-vulkan/
        mv ./linux-natives-amd64-OFF/*.so ./src/main/resources/linux-x64/
        mv ./linux-natives-arm64-OFF/*.so ./src/main/resources/linux-aarch64/
        mv ./windows-natives/*.dll ./src/main/resources/windows-x64/
        # mv ./whisper-jni-vulkan/*.dll ./src/main/resources/windows-x64-vulkan/
        mv ./mac-natives-x64/*.dylib ./src/main/resources/mac-x64/
        mv ./mac-natives-aarch64/*.dylib ./src/main/resources/mac-aarch64/
    - name: Setup project dir
      run: |
        git submodule update --init
        mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
        mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
    - name: Build
      run: ./gradlew clean build publish --stacktrace
    - name: Publish test report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/build/test-results/**/*.xml'
    - name: Publish to maven central
      run: ./gradlew jreleaserDeploy --stacktrace
      env:
        JRELEASER_MAVENCENTRAL_STAGE: UPLOAD # Don't publish, just upload so I can review it
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        generate_release_notes: true
        files: |
          **/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
