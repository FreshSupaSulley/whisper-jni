name: Build and publish
on:
  workflow_dispatch:
jobs:
  download-models:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download tiny ggml model
      run: |
        git submodule update --init
        ./download-test-model.sh
        ./download-vad-model.sh
    - uses: actions/upload-artifact@v4
      with:
        name: tiny-ggml-model
        path: ggml-tiny.bin
        retention-days: 2
    - name: Upload silero model
      uses: actions/upload-artifact@v4
      with:
        name: silero-ggml-model
        path: ggml-silero-v5.1.2.bin
        retention-days: 2

  build-linux:
    needs: [download-models]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # arch: [linux-x64, linux-aarch64]
        # platform: [amd64, arm64]
        # vulkan: [OFF, ON]
        # Define combinations of architecture and platform
        include:
          - arch: linux-x64
            platform: amd64
            vulkan: OFF
          - arch: linux-x64
            platform: amd64
            vulkan: ON
          - arch: linux-aarch64
            platform: arm64
            vulkan: OFF
          - arch: linux-aarch64
            platform: arm64
            vulkan: ON
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: docker/setup-buildx-action@v3
        with:
          install: true
        # arm64 only!
      - uses: docker/setup-qemu-action@v3
        if: matrix.platform == 'arm64'
      - name: Setup project dir
        run: |
          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
          mkdir -p test-results
      - name: Build native library
        # Ok... the build script runs at docker build
        # If you try -v in docker run, the mount will overwrite what's in there
        run: |
          # Specify if we're building for Vulkan
          export VULKAN_ARG=${{ matrix.vulkan }}
          OUTPUT_DIR="src/main/resources/${{ matrix.arch }}"
          docker build -f dockerfile . -t whisperjni_binary:${{ matrix.platform }} --platform ${{ matrix.platform }} --load
          docker run \
            --platform=${{ matrix.platform }} \
            -v "$(pwd)/$OUTPUT_DIR:/app/$OUTPUT_DIR" \
            -v "$(pwd)/test-results:/app/build/test-results" \
            whisperjni_binary:${{ matrix.platform }}
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/test-results/**/*.xml'
      - name: Upload natives
        uses: actions/upload-artifact@v4
        with:
          name: linux-natives-${{ matrix.platform }}-${{ matrix.vulkan }}
          path: whisperjni-build/*

  build-windows:
    needs: [download-models]
    runs-on: windows-latest
    strategy:
      matrix:
        vulkan: [OFF, ON]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      # Also install Vulkan if we're building for it
      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1
        if: matrix.vulkan == 'ON'
        with:
          vulkan_version: 1.4.309.0
          install_runtime: true
          cache: true
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build
        shell: powershell
        env:
          # Picked up in the ps script
          VULKAN: ${{ matrix.vulkan }}
        run: .\build_win.ps1
      - name: Test
        run: ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/*.xml'
      - name: Artifact windows x64
        uses: actions/upload-artifact@v4
        with:
          name: windows-natives-${{ matrix.vulkan }}
          path: whisperjni-build/*.dll
#
#  build-windows-vulkan:
#    needs: [download-models]
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/download-artifact@v4
#      - uses: actions/setup-java@v4
#        with:
#          java-version: 22
#          distribution: 'temurin'
#      # Also install Vulkan
#      - name: Install Vulkan SDK
#        uses: jakoch/install-vulkan-sdk-action@v1
#        with:
#          vulkan_version: 1.4.309.0
#          install_runtime: true
#          cache: true
#      - name: Setup project dir
#        run: |
#          git submodule update --init
#          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
#          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
#      - name: Build
#        run: .\build_win_vulkan.ps1
#        shell: powershell
#      - name: Test
#        run: ./gradlew test
#      - name: Publish test report
#        uses: mikepenz/action-junit-report@v5
#        if: success() || failure()
#        with:
#          report_paths: '**/build/test-results/test/test-*.xml'
#      - name: Upload Vulkan DLL artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: whisper-jni-vulkan
#          path: src/main/resources/windows-x64-vulkan/*.dll

  build-mac:
    needs: [download-models]
    strategy:
      matrix:
        include:
        - arch: x86_64
          version: macos-13
        - arch: aarch64
          version: macos-14
    # Can't we just build on macos-14 for both?? Need to test
    runs-on: ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 22
          distribution: 'temurin'
      - name: Setup project dir
        run: |
          git submodule update --init
          mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
          mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
      - name: Build binary
        run: |
          export DYLD_LIBRARY_PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/
          ./build_mac.sh ${{ matrix.arch }}
        # Apparently gradlew isn't executable by default
      - name: Test
        run: |
          chmod +x ./gradlew
          ./gradlew test
      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/*.xml'
      - name: Artifact macos x64
        uses: actions/upload-artifact@v4
        with:
          name: mac-natives-${{ matrix.arch }}
          path: whisperjni-build/*.dylib

  publish:
    runs-on: ubuntu-latest
    needs: [download-models, build-linux, build-windows, build-mac]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
    - uses: actions/setup-java@v4
      with:
        java-version: 22
        distribution: 'temurin'
    - name: Check tree
      run: ls -R
    - name: Move natives
      run: |
        find ./src/main/resources -name ".gitkeep" -type f -delete
        # mv ./linux-natives-amd64-ON/*.so ./src/main/resources/linux-x64-vulkan/
        # mv ./linux-natives-arm64-ON/*.so ./src/main/resources/linux-aarch64-vulkan/
        mv ./linux-natives-amd64-OFF/*.so ./src/main/resources/linux-x64/
        mv ./linux-natives-arm64-OFF/*.so ./src/main/resources/linux-aarch64/
        mv ./windows-natives/*.dll ./src/main/resources/windows-x64/
        # mv ./whisper-jni-vulkan/*.dll ./src/main/resources/windows-x64-vulkan/
        mv ./mac-natives-x64/*.dylib ./src/main/resources/mac-x64/
        mv ./mac-natives-aarch64/*.dylib ./src/main/resources/mac-aarch64/
    - name: Setup project dir
      run: |
        git submodule update --init
        mv ./tiny-ggml-model/ggml-tiny.bin ./ggml-tiny.bin
        mv ./silero-ggml-model/ggml-silero-v5.1.2.bin ./src/main/resources
    - name: Build
      run: ./gradlew clean build publish --stacktrace
    - name: Publish test report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/build/test-results/**/*.xml'
    - name: Publish
      run: ./gradlew jreleaserDeploy --stacktrace
      env:
        JRELEASER_MAVENCENTRAL_STAGE: UPLOAD # Don't publish, just upload so I can review it
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
